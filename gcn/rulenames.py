ruleNames_C = [
		"translationunit", "primaryexpression", "idexpression", "unqualifiedid",
		"qualifiedid", "nestednamespecifier", "lambdaexpression", "lambdaintroducer",
		"lambdacapture", "capturedefault", "capturelist", "capture", "simplecapture",
		"initcapture", "lambdadeclarator", "postfixexpression", "expressionlist",
		"pseudodestructorname", "unaryexpression", "unaryoperator", "newexpression",
		"newplacement", "newtypeid", "newdeclarator", "noptrnewdeclarator", "newinitializer",
		"deleteexpression", "noexceptexpression", "castexpression", "pmexpression",
		"multiplicativeexpression", "additiveexpression", "shiftexpression", "relationalexpression",
		"equalityexpression", "andexpression", "exclusiveorexpression", "inclusiveorexpression",
		"logicalandexpression", "logicalorexpression", "conditionalexpression",
		"assignmentexpression", "assignmentoperator", "expression", "constantexpression",
		"nestedParenthesesBlock", "statement", "labeledstatement", "expressionstatement",
		"compoundstatement", "statementseq", "selectionstatement", "condition",
		"iterationstatement", "forinitstatement", "forrangedeclaration", "forrangeinitializer",
		"jumpstatement", "unknownstatement", "declarationstatement", "declarationseq",
		"declaration", "blockdeclaration", "aliasdeclaration", "simpledeclaration",
		"static_assertdeclaration", "emptydeclaration", "attributedeclaration",
		"declspecifier", "declspecifierseq", "storageclassspecifier", "functionspecifier",
		"typedefname", "typespecifier", "trailingtypespecifier", "typespecifierseq",
		"trailingtypespecifierseq", "simpletypespecifier", "typename", "decltypespecifier",
		"elaboratedtypespecifier", "enumname", "enumspecifier", "enumhead", "opaqueenumdeclaration",
		"enumkey", "enumbase", "enumeratorlist", "enumeratordefinition", "enumerator",
		"namespacename", "originalnamespacename", "namespacedefinition", "namednamespacedefinition",
		"originalnamespacedefinition", "extensionnamespacedefinition", "unnamednamespacedefinition",
		"namespacebody", "namespacealias", "namespacealiasdefinition", "qualifiednamespacespecifier",
		"usingdeclaration", "usingdirective", "asmdefinition", "linkagespecification",
		"attributespecifierseq", "attributespecifier", "alignmentspecifier", "attributelist",
		"attribute", "attributetoken", "attributescopedtoken", "attributenamespace",
		"attributeargumentclause", "balancedtokenseq", "balancedtoken", "initdeclaratorlist",
		"initdeclarator", "declarator", "ptrdeclarator", "noptrdeclarator", "parametersandqualifiers",
		"trailingreturntype", "ptroperator", "cvqualifierseq", "cvqualifier",
		"refqualifier", "declaratorid", "typeid", "abstractdeclarator", "ptrabstractdeclarator",
		"noptrabstractdeclarator", "abstractpackdeclarator", "noptrabstractpackdeclarator",
		"parameterdeclarationclause", "parameterdeclarationlist", "parameterdeclaration",
		"functiondefinition", "functionbody", "initializer", "braceorequalinitializer",
		"initializerclause", "initializerlist", "bracedinitlist", "classname",
		"classspecifier", "classhead", "classheadname", "classvirtspecifier",
		"classkey", "memberspecification", "memberdeclaration", "memberdeclaratorlist",
		"memberdeclarator", "virtspecifierseq", "virtspecifier", "purespecifier",
		"baseclause", "basespecifierlist", "basespecifier", "classordecltype",
		"basetypespecifier", "accessspecifier", "conversionfunctionid", "conversiontypeid",
		"conversiondeclarator", "ctorinitializer", "meminitializerlist", "meminitializer",
		"meminitializerid", "operatorfunctionid", "literaloperatorid", "templatedeclaration",
		"templateparameterlist", "templateparameter", "typeparameter", "simpletemplateid",
		"templateid", "templatename", "templateargumentlist", "templateargument",
		"typenamespecifier", "explicitinstantiation", "explicitspecialization",
		"tryblock", "functiontryblock", "handlerseq", "handler", "exceptiondeclaration",
		"throwexpression", "exceptionspecification", "dynamicexceptionspecification",
		"typeidlist", "noexceptspecification", "rightShift", "rightShiftAssign",
		"operator", "literal", "booleanliteral", "pointerliteral", "userdefinedliteral"
]